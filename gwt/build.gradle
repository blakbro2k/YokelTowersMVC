/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.org.wisepersist:gwt-gradle-plugin:${versionsgwtPlugin}"
  }
}

apply plugin: 'war'
apply plugin: 'gwt'

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev

def HttpFileServer server = null
def httpFilePort = 8080

dependencies {
  compile project(path: ':core')
  //compile project(":tests:gdx-tests")
  //compile project(":backends:gdx-backends-gwt")
  //compile project(":extensions:gdx-box2d:gdx-box2d-gwt")
  //compile project(":extensions:gdx-controllers:gdx-controllers-gwt")
  implementation "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
  implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
  implementation "com.github.czyzby:gdx-autumn:$autumnVersion:sources"
  implementation "com.github.czyzby:gdx-autumn-gwt:$autumnVersion"
  implementation "com.github.czyzby:gdx-autumn-gwt:$autumnVersion:sources"
  implementation "com.github.czyzby:gdx-autumn-mvc:$autumnMvcVersion"
  implementation "com.github.czyzby:gdx-kiwi:$kiwiVersion:sources"
  implementation "com.github.czyzby:gdx-autumn-mvc:$autumnMvcVersion:sources"
  implementation "com.github.czyzby:gdx-lml:$lmlVersion:sources"
  implementation "com.github.czyzby:gdx-websocket:$websocketVersion:sources"
  implementation "com.github.czyzby:gdx-websocket-gwt:$websocketVersion"
  implementation "com.github.czyzby:gdx-websocket-gwt:$websocketVersion:sources"
  implementation "com.github.czyzby:gdx-websocket-serialization:$websocketSerializationVersion:sources"
  implementation "com.github.czyzby:gdx-lml-vis:$lmlVisVersion:sources"
  implementation "com.kotcrab.vis:vis-ui:$visUiVersion:sources"
}

gwt {
  gwtVersion='2.8.2' // Should match the gwt version used for building the gwt backend
  maxHeapSize="1G" // Default 256m is not enough for gwt compiler. GWT is HUNGRY
  minHeapSize="1G"

  src = files(file("src/")) // Needs to be in front of "modules" below.
  modules 'net.asg.games.GdxDefinition'
  devModules 'net.asg.games.GdxDefinitionSuperdev'

  compiler.strict = true
  compiler.disableCastChecking = true
}

task startHttpServer () {
  dependsOn draftCompileGwt

  String output = project.buildDir.path + "/gwt/draftOut"

  doLast {
    copy {
      from "webapp"
      into output
    }

    copy {
      from "war"
      into output
    }

    server = new SimpleHttpFileServerFactory().start(new File(output), httpFilePort)

    println "Server started in directory " + server.getContentRoot() + ", http://localhost:" + server.getPort()
  }
}

task superDev (type: GwtSuperDev) {
  dependsOn startHttpServer
  doFirst {
    gwt.modules = gwt.devModules
  }
}

task dist(dependsOn: [clean, compileGwt]) {
  doLast {
    file("build/dist").mkdirs()
    copy {
      from "build/gwt/out"
      into "build/dist"
    }
    copy {
      from "webapp"
      into "build/dist"
    }
    copy {
      from "war"
      into "build/dist"
    }
  }
}


task addSource {
  doLast {
    sourceSets.main.compileClasspath += files(project(':tests:gdx-tests').sourceSets.main.allJava.srcDirs)
    sourceSets.main.compileClasspath += files(project(':backends:gdx-backends-gwt').sourceSets.main.allJava.srcDirs)
    sourceSets.main.compileClasspath += files(project(':extensions:gdx-box2d:gdx-box2d-gwt').sourceSets.main.allJava.srcDirs)
    sourceSets.main.compileClasspath += files(project(':extensions:gdx-controllers:gdx-controllers').sourceSets.main.allJava.srcDirs)
    sourceSets.main.compileClasspath += files(project(':extensions:gdx-controllers:gdx-controllers-gwt').sourceSets.main.allJava.srcDirs)
    sourceSets.main.compileClasspath += files(project(':gdx').sourceSets.main.allJava.srcDirs)
  }
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)