/* 104 - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */
package towers;

public class CellEval
{
    public static int getCellFlag(int value) {
    	return value & 0xf;
    }
    
    public static int setValueFlag(int original, int newValue) {
    	return original & ~0xf | newValue;
    }
    
    public static boolean hasAddedByYahooFlag(int i) {
		if ((i & 0x80) == 0)
		    return false;
		return true;
    }
    
    public static int addArtificialFlag(int i) {
    	return i | 0x80;
    }
    
    public static boolean hasBrokenFlag(int i) {
		if ((i & 0x100) == 0)
		    return false;
		return true;
    }
    
    public static int addBrokenFlag(int i) {
    	return i | 0x100;
    }
    
    public static int removeBrokenFlag(int i) {
    	return i & ~0x100;
    }
    
    public static boolean hasPartnerBreakFlag(int i) {
    	if ((i & 0x200) == 0)
    		return false;
    	return true;
    }
    
    public static int addPartnerBreakFlag(int i) {
    	return i | 0x200;
    }
    
    public static int removePartnerBreakFlag(int i) {
    	return i & ~0x200;
    }
    
    public static int getID(int i) {
    	return (i & 0x7f000) >> 12;
    }
    
    public static int setIDFlag(int i, int id) {
    	if (id > 127)
    		System.out.println("Assertion failure: invalid id " + id);
    	return i & ~0x7f000 | id << 12;
    }
    
    /* Retrieves power "level"
     * - Even represents defensive powers ( 2, 4, 6 )
     * - Odd represents attack powers ( 3, 5, 7 )
     * ( MINOR, REGULAR, MEGA )
     */
    public static int getPowerFlag(int i) {
    	return (i & 0x70) >> 4;
    }
    
    public static int setPowerFlag(int value, int power) {
    	if (power > 7) {
    		System.out.println("Assertion failure: invalid special " + power);
    	}
    	
    	return value & ~0x70 | power << 4;
    }
    
    public static boolean hasSpecialFlag(int i) {
    	if ((i & 0x400) == 0)
    		return false;
    	return true;
    }
    
    public static int addSpecialFlag(int i) {
    	return i | 0x400;
    }
    
    public static boolean hasPowerBlockFlag(int i) {
    	if ((i & 0x800) == 0)
    		return false;
    	return true;
    }
    
    public static int addPowerBlockFlag(int i) {
    	return i | 0x800;
    }
    
    public static boolean isOffensive(int i) {
		if ((getPowerFlag(i) & 0x1) == 0)
		    return false;
		return true;
    }
    
    public static int getPowerLevel(int i) {
    	return getPowerFlag(i) >> 1;
    }
    
    public static String getPowerLabel(int i, DictWrapperInterface dwi) {
    	//TowersUtils.print( "this deally called" );
		if (hasSpecialFlag(i)) {
			TowersUtils.print( "this one is okay " + dwi.getStringFromDict(1716519979) );
		    return dwi.getStringFromDict(1716519979);
		}
		boolean isOffensive = isOffensive(i);
		int severity = getPowerLevel(i);
		switch (getCellFlag(i)) {
			case 0: // Y powers
			    if (isOffensive)
			    	return dwi.getStringFromDict(1716519935);
			    return dwi.getStringFromDict(1716519968);
			case 1: // A powers
			    if (isOffensive) {
					switch (severity) {
						case 1: // regular
							return dwi.getStringFromDict(1716519963);
						case 2: // mega
							return dwi.getStringFromDict(1716519943);
						default: // minor
							return dwi.getStringFromDict(1716519955);
					}
			    }
			    switch (severity) {
				    case 1:
				    	return dwi.getStringFromDict(1716519959);
				    case 2:
				    	return dwi.getStringFromDict(1716519937);
				    default:
				    	return dwi.getStringFromDict(1716519951);
			    }
			case 2: // H powers
			    if (isOffensive) {
					switch (severity) {
						case 1:
						    return dwi.getStringFromDict(1716519965);
						case 2:
						    return dwi.getStringFromDict(1716519977);
						default:
						    return dwi.getStringFromDict(1716519957);
					}
			    }
			    switch (severity) {
				    case 1:
				    	return dwi.getStringFromDict(1716519949);
				    case 2:
				    	return dwi.getStringFromDict(1716519947);
				    default:
				    	return dwi.getStringFromDict(1716519948);
			    }
			case 3:
			    if (isOffensive) {
					switch (severity) {
						case 1:
						    return dwi.getStringFromDict(1716519961);
						case 2:
						    return dwi.getStringFromDict(1716519941);
						default:
						    return dwi.getStringFromDict(1716519953);
					}
				}
			    return dwi.getStringFromDict(1716519939);
			case 4:
			    if (isOffensive)
			    	return dwi.getStringFromDict(1716519974);
			    return dwi.getStringFromDict(1716519975);
			case 5:
			    if (isOffensive)
			    	return dwi.getStringFromDict(1716519969);
			    return dwi.getStringFromDict(1716519973);
			default:
			    return "?";
		}
    }
    
    public static String getPowerUseDescriptionLabel(int i, DictWrapperInterface dwi) {
		if (hasSpecialFlag(i))
		    return dwi.getStringFromDict(1716519978);
		boolean isOffensive = isOffensive(i);
		int severity = getPowerLevel(i);
		switch (getCellFlag(i)) {
		case 0:
		    if (isOffensive)
			return dwi.getStringFromDict(1716519934);
		    return dwi.getStringFromDict(1716519966);
		case 1:
		    if (isOffensive) {
			switch (severity) {
			case 1:
			    return dwi.getStringFromDict(1716519962);
			case 2:
			    return dwi.getStringFromDict(1716519942);
			default:
			    return dwi.getStringFromDict(1716519954);
			}
		    }
		    switch (severity) {
		    case 1:
			return dwi.getStringFromDict(1716519958);
		    case 2:
			return dwi.getStringFromDict(1716519936);
		    default:
			return dwi.getStringFromDict(1716519950);
		    }
		case 2:
		    if (isOffensive) {
			switch (severity) {
			case 1:
			    return dwi.getStringFromDict(1716519964);
			case 2:
			    return dwi.getStringFromDict(1716519976);
			default:
			    return dwi.getStringFromDict(1716519956);
			}
		    }
		    switch (severity) {
		    case 1:
			return dwi.getStringFromDict(1716519946);
		    case 2:
			return dwi.getStringFromDict(1716519944);
		    default:
			return dwi.getStringFromDict(1716519945);
		    }
		case 3:
		    if (isOffensive) {
			switch (severity) {
			case 1:
			    return dwi.getStringFromDict(1716519960);
			case 2:
			    return dwi.getStringFromDict(1716519940);
			default:
			    return dwi.getStringFromDict(1716519952);
			}
		    }
		    return dwi.getStringFromDict(1716519938);
		case 4:
		    if (isOffensive)
			return dwi.getStringFromDict(1716519971);
		    return dwi.getStringFromDict(1716519972);
		case 5:
		    if (isOffensive)
			return dwi.getStringFromDict(1716519967);
		    return dwi.getStringFromDict(1716519970);
		default:
		    return "?";
		}
    }
}
